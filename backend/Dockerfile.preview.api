# =================================================================
# Stage 1: Builder
# このステージでは、ソースコードをビルドするために必要なすべての依存関係をインストールします。
# =================================================================
FROM node:22-slim AS builder

# Node.jsに同梱されているCorepackを使用してpnpmを有効化します。
# これにより、`npm install -g pnpm`が不要になります。
RUN corepack enable

WORKDIR /usr/src/app

COPY package.json ./
RUN pnpm install --prod=false

COPY . .
RUN pnpm run build

# ビルドが完了した後、本番環境に不要な開発用の依存関係を削除します。
RUN pnpm prune --prod


# =================================================================
# Stage 2: Production
# このステージでは、ビルドされたアプリケーションと本番用の依存関係のみを含む
# 軽量な最終イメージを作成します。
# =================================================================
FROM node:22-slim

# Node.jsに同梱されているCorepackを使用してpnpmを有効化します。
RUN corepack enable

WORKDIR /usr/src/app

# `builder`ステージから、本番稼働に必要なファイルのみを慎重にコピーします。
COPY --from=builder /usr/src/app/package.json ./
COPY --from=builder /usr/src/app/pnpm-lock.yaml ./
COPY --from=builder /usr/src/app/node_modules ./node_modules
COPY --from=builder /usr/src/app/dist ./dist

# Cloud Runはコンテナのポート8080をリッスンします。
# $PORT環境変数はCloud Runによって自動的に設定されます。
EXPOSE 8080

# アプリケーションを起動します。
# package.jsonの"start"スクリプトが "node dist/index.js" のようになっていることを想定しています。
# より明確に CMD ["node", "dist/index.js"] と直接指定することも推奨されます。
CMD ["npm", "start"]
