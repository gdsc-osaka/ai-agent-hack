/* tslint:disable */
/* eslint-disable */
/**
 * Recall you API
 * API for Recall you
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    'message': string;
    /**
     * 
     * @type {ApiErrorCode}
     * @memberof ApiError
     */
    'code': ApiErrorCode;
    /**
     * 
     * @type {Array<any>}
     * @memberof ApiError
     */
    'details': Array<any>;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ApiErrorCode = {
    DatabaseUnknownError: 'DATABASE_UNKNOWN_ERROR',
    DatabaseNotFound: 'DATABASE_NOT_FOUND',
    DatabaseAlreadyExists: 'DATABASE_ALREADY_EXISTS',
    DatabaseInconsistentType: 'DATABASE_INCONSISTENT_TYPE'
} as const;

export type ApiErrorCode = typeof ApiErrorCode[keyof typeof ApiErrorCode];


/**
 * 
 * @export
 * @interface Store
 */
export interface Store {
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'id': string;
    /**
     * 
     * @type {Timestamp}
     * @memberof Store
     */
    'createdAt': Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof Store
     */
    'updatedAt': Timestamp;
}
/**
 * 
 * @export
 * @interface Timestamp
 */
export interface Timestamp {
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'seconds': number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'nanoseconds': number;
}

/**
 * StoresApi - axios parameter creator
 * @export
 */
export const StoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStore: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoresApi - functional programming interface
 * @export
 */
export const StoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoresApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStore(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Store>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStore(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoresApi.createStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StoresApi - factory interface
 * @export
 */
export const StoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoresApiFp(configuration)
    return {
        /**
         * Create a new store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStore(options?: RawAxiosRequestConfig): AxiosPromise<Store> {
            return localVarFp.createStore(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoresApi - object-oriented interface
 * @export
 * @class StoresApi
 * @extends {BaseAPI}
 */
export class StoresApi extends BaseAPI {
    /**
     * Create a new store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    public createStore(options?: RawAxiosRequestConfig) {
        return StoresApiFp(this.configuration).createStore(options).then((request) => request(this.axios, this.basePath));
    }
}



