/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/vector/face-auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Authenticate a user using face recognition */
        post: operations["authenticateFace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vector/face": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Register a user's face for authentication */
        post: operations["registerFace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new store */
        post: operations["createStore"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stores/:storeId/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Invite a staff member to a store */
        post: operations["inviteStaffToStore"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/staffs/me/stores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch stores for staff */
        get: operations["fetchStoresForStaff"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Customer: {
            /** @description The ID of the authenticated user */
            customerId: string;
            /**
             * Format: date-time
             * @description Timestamp of when the user was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp of when the user was last updated
             */
            updatedAt: string;
        };
        /** @enum {string} */
        ApiErrorCode: "DATABASE_UNKNOWN_ERROR" | "DATABASE_NOT_FOUND" | "DATABASE_ALREADY_EXISTS" | "DATABASE_INCONSISTENT_TYPE" | "PERMISSION_DENIED" | "INVALID_REQUEST_BODY";
        ApiError: {
            message: string;
            code: components["schemas"]["ApiErrorCode"];
            /** @default [] */
            details: unknown[];
        };
        Timestamp: {
            seconds: number;
            nanoseconds: number;
        };
        Store: {
            id: string;
            createdAt: components["schemas"]["Timestamp"];
            updatedAt: components["schemas"]["Timestamp"];
        };
        /** @enum {string} */
        StaffInvitationStatus: "PENDING" | "ACCEPTED" | "DECLINED" | "EXPIRED";
        /** @enum {string} */
        StaffRole: "ADMIN" | "STAFF";
        StaffInvitation: {
            status: components["schemas"]["StaffInvitationStatus"];
            role: components["schemas"]["StaffRole"];
            storeId: string;
            /**
             * Format: email
             * @description Email of the staff member to invite
             */
            targetEmail: string;
            invitedBy: string;
            /** @description Unique token for the invitation */
            token: string;
            expiredAt: components["schemas"]["Timestamp"];
            createdAt: components["schemas"]["Timestamp"];
            updatedAt: components["schemas"]["Timestamp"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    authenticateFace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Image for face authentication
                     */
                    image: string;
                };
            };
        };
        responses: {
            /** @description Successful authenticated response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description Bad Request - Invalid input or missing image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description Forbidden - User not authenticated */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    registerFace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Image for face registration
                     */
                    image: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"] & {
                        /** @description The ID of registered user. */
                        customerId?: string;
                        /** @description Timestamp of when the user was created */
                        createdAt?: string;
                        /** @description Timestamp of when the user was last updated */
                        updatedAt?: string;
                    };
                };
            };
            /** @description Bad Request - Invalid input or missing image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    createStore: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Unique identifier for the store */
                    id: string;
                };
            };
        };
        responses: {
            /** @description Create store response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Store"];
                };
            };
            /** @description Bad Request - Invalid input or missing image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    inviteStaffToStore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the store to invite staff to */
                storeId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @description Email of the staff member to invite
                     */
                    email: string;
                    role: components["schemas"]["StaffRole"];
                };
            };
        };
        responses: {
            /** @description Staff invitation sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffInvitation"];
                };
            };
            /** @description Bad Request - Invalid input or missing image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
    fetchStoresForStaff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        stores: components["schemas"]["Store"][];
                    };
                };
            };
            /** @description Bad Request - Invalid input or missing image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
        };
    };
}
