name: Deploy Preview Environment

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'web/**'
      - '.github/workflows/ci-preview.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  GCP_PROJECT_ID: 'recall-you'
  GCP_PROJECT_NUMBER: '966744275445'
  GCP_REGION: 'asia-northeast1'
  GCP_SERVICE_ACCOUNT: 'github-action-994212429@recall-you.iam.gserviceaccount.com'
  GCP_WORKLOAD_IDENTITY_PROVIDER: 'projects/966744275445/locations/global/workloadIdentityPools/gh-pool/providers/gh-repo-provider'
  REPO_NAME: 'cloud-run-source-deploy'
permissions:
  checks: write
  contents: read
  pull-requests: write
jobs:
  setup-env:
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write' # OIDC認証に必要
    outputs:
      hosting_url: ${{ steps.firebase.outputs.hosting_url }}
      api_service_name: ${{ steps.env.outputs.api_service_name }}
      web_service_name: ${{ steps.env.outputs.web_service_name }}
      api_service_url: ${{ steps.env.outputs.api_service_url }}
      web_service_url: ${{ steps.env.outputs.web_service_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - uses: 'actions/setup-node@v4'
        with:
          node-version: '22'
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Get latest firebase deployment
        working-directory: web
        id: firebase
        run: |
          channel_url=$(firebase hosting:channel:list --json | jq -r '.result.channels[] | select(.name | startswith("projects/recall-you/sites/recall-you/channels/pr39")) | .url' | head -n 1)
          
          if [ -z "$channel_url" ]; then
            echo "No existing channel found. Creating a new channel."
            result=firebase hosting:channel:create pr39-harineko0-employee-c --expires 1d --json
            channel_url=$(echo "$result" | jq -r '.result.url')
          else
            echo "Existing channel found: $channel_url"
          fi
          echo "hosting_url=$channel_url" >> $GITHUB_OUTPUT
      - name: Create environment variables
        id: env
        run: |
          API_SERVICE_NAME="recall-you-api-preview-pr-${{ github.event.number }}"
          WEB_SERVICE_NAME="recall-you-web-preview-pr-${{ github.event.number }}"
          echo "api_service_name=$API_SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "web_service_name=$WEB_SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "api_service_url=https://$API_SERVICE_NAME-${{ env.GCP_PROJECT_NUMBER }}.${{ env.GCP_REGION }}.run.app" >> $GITHUB_OUTPUT
          echo "web_service_url=https://$WEB_SERVICE_NAME-${{ env.GCP_PROJECT_NUMBER }}.${{ env.GCP_REGION }}.run.app" >> $GITHUB_OUTPUT
  backend:
    needs: setup-env
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # OIDC認証に必要
    defaults:
      run:
        working-directory: backend
    timeout-minutes: 10
    outputs:
      service_url: ${{ steps.deploy.outputs.service_url }}
      service_name: ${{ steps.deploy.outputs.service_name }}
    steps:
      - uses: actions/checkout@v4
      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # env
      - name: Setting Environment Variables
        run: |
          echo "IMAGE_TAG_API=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-api-preview:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_TAG_DB=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-db-preview:${{ github.sha }}" >> $GITHUB_ENV
      # Build
      - name: Build and Push API Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.preview.api
          tags: ${{ env.IMAGE_TAG_API }}
          push: true
          cache-from: type=registry,ref=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-api-preview:cache
          cache-to: type=registry,ref=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-api-preview:cache,mode=max
      - name: Build and Push DB Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.preview.db
          tags: ${{ env.IMAGE_TAG_DB }}
          push: true
          cache-from: type=registry,ref=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-db-preview:cache
          cache-to: type=registry,ref=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-db-preview:cache,mode=max
      # Deploy
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          PR_NUMBER=${{ github.event.number }}
          
          gcloud run deploy ${{ needs.setup-env.outputs.api_service_name }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --labels="preview-env=true,created-at=$(date +%s),pr-number=$PR_NUMBER" \
            --container api \
              --image=$IMAGE_TAG_API \
              --port=8080 \
              --set-env-vars="NODE_ENV=production" \
              --set-env-vars="PULL_REQUEST_NUMBER=$PR_NUMBER" \
              --set-env-vars="DATABASE_URL=postgresql://user:password@localhost:5432/db" \
              --set-secrets="FIRE_SA=FIRE_SA:latest" \
              --set-env-vars="AUTH_SECRET=${{ secrets.AUTH_SECRET }}" \
              --set-env-vars="AUTH_DATABASE_URL=postgresql://user:password@localhost:5432/auth_db" \
              --set-env-vars="TRUSTED_ORIGIN_WEB=${{ needs.setup-env.outputs.hosting_url }}" \
            --container db \
              --image=$IMAGE_TAG_DB \
              --set-env-vars="PULL_REQUEST_NUMBER=$PR_NUMBER" \
              --set-env-vars="POSTGRES_USER=user" \
              --set-env-vars="POSTGRES_PASSWORD=password" \
              --set-env-vars="POSTGRES_DB=db" \
              --memory=1Gi
          
          SERVICE_URL=$(gcloud run services describe ${{ needs.setup-env.outputs.api_service_name }} --platform managed --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "service_name=${{ needs.setup-env.outputs.api_service_name }}" >> $GITHUB_OUTPUT
  # Deploy to Firebase Hosting
  web:
    needs: setup-env
    defaults:
      run:
        working-directory: web
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: 'read'
      id-token: 'write' # OIDC認証に必要
    timeout-minutes: 10
    outputs:
      service_url: ${{ steps.deploy.outputs.service_url }}
      service_name: ${{ steps.deploy.outputs.service_name }}
    steps:
      - uses: actions/checkout@v4
      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # env
      - name: Setting Environment Variables
        run: |
          echo "IMAGE_TAG_WEB=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-web-preview:${{ github.sha }}" >> $GITHUB_ENV
      # Build
      - name: Geenrate .env
        run: |
          echo "NODE_ENV=production" > .env.local
          echo "API_URL=${{ needs.setup-env.outputs.api_service_url }}" >> .env.local
          echo "AUTH_SECRET=${{ secrets.AUTH_SECRET }}" >> .env.local
      - name: Build and Push Web Image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile.preview.web
          tags: ${{ env.IMAGE_TAG_WEB }}
          push: true
          cache-from: type=registry,ref=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-web-preview:cache
          cache-to: type=registry,ref=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-web-preview:cache,mode=max
      # Deploy
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          PR_NUMBER=${{ github.event.number }}
          
          gcloud run deploy ${{ needs.setup-env.outputs.web_service_name }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --labels="preview-env=true,created-at=$(date +%s),pr-number=$PR_NUMBER" \
            --container web \
              --image=$IMAGE_TAG_WEB \
              --port=3000 \
              --set-env-vars="PULL_REQUEST_NUMBER=$PR_NUMBER"
          
          SERVICE_URL=$(gcloud run services describe ${{ needs.setup-env.outputs.web_service_name }} --platform managed --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "service_name=${{ needs.setup-env.outputs.web_service_name }}" >> $GITHUB_OUTPUT
  hosting:
    needs: [backend, web]
    defaults:
      run:
        working-directory: web
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: 'read'
      id-token: 'write' # OIDC認証に必要
      pull-requests: 'write'
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Overwrite rewrites on firebase.json
        run: |
          sed -i "s/recall-you-api-preview/${{ needs.backend.outputs.service_name }}/g" firebase.json
          sed -i "s/recall-you-web-preview/${{ needs.web.outputs.service_name }}/g" firebase.json
      - uses: FirebaseExtended/action-hosting-deploy@v0
        id: firebase
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_RECALL_YOU }}
          projectId: recall-you
          expires: '3d'
          entryPoint: 'web'
          disableComment: true
      - name: Comment on PR
        run: |
          COMMENT_TAG="<!-- PREVIEW_URL_COMMENT -->"
          echo "$COMMENT_TAG" > tmp
          echo "🚀 Preview Server is ready!" >> tmp
          echo "* API Server: ${{ needs.backend.outputs.service_url }}" >> tmp
          echo "* Web Server: ${{ needs.web.outputs.service_url }}" >> tmp
          echo "* Hosting URL: ${{ steps.firebase.outputs.details_url }}" >> tmp
          EXISTING_COMMENT=$(gh pr view ${{ github.event.number }} --json comments -q '.comments[] | select(.body | contains("<!-- PREVIEW_URL_COMMENT -->"))')
          # コメントが存在しない場合のみ、新しいコメントを投稿
          if [ -z "$EXISTING_COMMENT" ]; then
            gh pr comment ${{ github.event.number }} --body-file - <<< "$(cat tmp)"
          else
            echo "Preview API URL comment already exists."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}