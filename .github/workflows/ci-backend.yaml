name: CI (backend)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/ci-backend.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/ci-backend.yaml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  GCP_PROJECT_ID: 'recall-you'
  GCP_REGION: 'asia-northeast1'
  GCP_SERVICE_ACCOUNT: 'github-action-994212429@recall-you.iam.gserviceaccount.com'
  GCP_WORKLOAD_IDENTITY_PROVIDER: 'projects/966744275445/locations/global/workloadIdentityPools/gh-pool/providers/gh-repo-provider'
  REPO_NAME: 'cloud-run-source-deploy'
jobs:
  analyze:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    permissions:
      checks: write
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'backend/pnpm-lock.yaml'
      - name: cache-node-modules
        uses: actions/cache@v3
        id: cache-node
        env:
          cache-name: cache-node
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-cache-node-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-cache-node-
            ${{ runner.os }}-cache-
            ${{ runner.os }}-
      - name: Install node modules
        if: ${{ steps.cache-node.outputs.cache-hit != 'true' }}
        run: pnpm i
      - name: Generate .env
        shell: bash
        run: |
          echo "" > .env
      - name: Lint
        shell: bash
        run: npm run lint
      - name: Test
        shell: bash
        run: npm run test:unit
      - name: Build
        shell: bash
        run: npm run build
  preview:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # OIDCË™çË®º„Å´ÂøÖË¶Å
      packages: 'write'  # Artifact Registry„Å∏„ÅÆÊõ∏„ÅçËæº„Åø„Å´ÂøÖË¶Å
      pull-requests: 'write' # PR„Å∏„ÅÆ„Ç≥„É°„É≥„Éà„Å´ÂøÖË¶Å
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        id: auth
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GCP_REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      # env
      - name: Setting Environment Variables
        run: |
          IMAGE_NAME_API="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-api-preview"
          echo "IMAGE_TAG_API=${IMAGE_NAME_API}:${{ github.sha }}" >> $GITHUB_ENV
          echo "CACHE_REF_API=type=registry,ref=${IMAGE_NAME_API}:cache" >> $GITHUB_ENV

          IMAGE_NAME_DB="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/recall-you-db-preview"
          echo "IMAGE_TAG_DB=${IMAGE_NAME_DB}:${{ github.sha }}" >> $GITHUB_ENV
          echo "CACHE_REF_DB=type=registry,ref=${IMAGE_NAME_DB}:cache" >> $GITHUB_ENV

          echo "SERVICE_NAME=recall-you-api-preview-pr-${{ github.event.number }}" >> $GITHUB_ENV
      # Build
      - name: Build and Push API Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.preview.api
          push: true
          tags: ${{ env.IMAGE_TAG_API }}
          cache-from: ${{ env.CACHE_REF_API }}
          cache-to: ${{ env.CACHE_REF_API }},mode=max # (mode=max„ÅßÂÖ®„É¨„Ç§„É§„Éº„Çí„Ç≠„É£„ÉÉ„Ç∑„É•)
      - name: Build and Push DB Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.preview.db
          push: true
          tags: ${{ env.IMAGE_TAG_DB }}
          cache-from: ${{ env.CACHE_REF_DB }}
          cache-to: ${{ env.CACHE_REF_DB }},mode=max
      # Deploy
      - name: Deploy to Cloud Run
        run: |
          PR_NUMBER=${{ github.event.number }}
          
          gcloud run deploy $SERVICE_NAME \
            --project=${{ env.GCP_PROJECT_ID }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --labels="preview-env=true,created-at=$(date +%s),pr-number=$PR_NUMBER" \
            --container api \
              --image=$IMAGE_TAG_API \
              --port=8080 \
              --set-env-vars="PULL_REQUEST_NUMBER=$PR_NUMBER" \
              --set-env-vars="DATABASE_URL=postgresql://user:password@localhost:5432/db" \
              --set-secrets="FIRE_SA=FIRE_SA:latest" \
            --container db \
              --image=$IMAGE_TAG_DB \
              --set-env-vars="PULL_REQUEST_NUMBER=$PR_NUMBER" \
              --set-env-vars="POSTGRES_USER=user" \
              --set-env-vars="POSTGRES_PASSWORD=password" \
              --set-env-vars="POSTGRES_DB=db" \
              --memory=1Gi
      - name: Get Preview URL and Comment on PR
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          gh pr comment ${{ github.event.number }} --body "üöÄ Preview environment is ready! URL: $SERVICE_URL"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
